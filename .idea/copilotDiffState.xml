<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/commerin/telemetri/ui/components/FleetComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/commerin/telemetri/ui/components/FleetComponents.kt" />
              <option name="updatedContent" value="package com.commerin.telemetri.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;/**&#10; * Info chip component for displaying key-value pairs&#10; */&#10;@Composable&#10;fun InfoChip(&#10;    icon: ImageVector,&#10;    label: String,&#10;    value: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(8.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(16.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.width(4.dp))&#10;            Column {&#10;                Text(&#10;                    text = label,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = value,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Score card component for displaying scores with colors&#10; */&#10;@Composable&#10;fun ScoreCard(&#10;    title: String,&#10;    score: Float,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(8.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;${(score * 100).toInt()}%&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = color&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Digital speedometer component&#10; */&#10;@Composable&#10;fun DigitalSpeedometer(&#10;    speed: Float,&#10;    modifier: Modifier = Modifier,&#10;    unit: String = &quot;km/h&quot;&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(12.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;${speed.toInt()}&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            Text(&#10;                text = unit,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Data row component for displaying key-value pairs&#10; */&#10;@Composable&#10;fun DataRow(&#10;    label: String,&#10;    value: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/commerin/telemetri/ui/screens/usecases/SmartFleetManagementScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/commerin/telemetri/ui/screens/usecases/SmartFleetManagementScreen.kt" />
              <option name="originalContent" value="package com.commerin.telemetri.ui.screens.usecases&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.livedata.observeAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.commerin.telemetri.core.*&#10;import com.commerin.telemetri.domain.model.*&#10;import com.commerin.telemetri.ui.components.*&#10;import com.commerin.telemetri.ui.viewmodels.SmartFleetViewModel&#10;import com.commerin.telemetri.ui.viewmodels.TelematicsSessionViewModel&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SmartFleetManagementScreen(&#10;    onBackPressed: () -&gt; Unit,&#10;    onNavigateToReports: () -&gt; Unit = {}, // Add navigation callback&#10;    viewModel: SmartFleetViewModel = hiltViewModel(),&#10;    sessionViewModel: TelematicsSessionViewModel = viewModel()&#10;) {&#10;    val isCollecting by viewModel.isCollecting.observeAsState(false)&#10;    val driverState by viewModel.driverState.observeAsState()&#10;    val currentTrip by viewModel.currentTrip.observeAsState()&#10;    val drivingEvents by viewModel.drivingEvents.observeAsState(emptyList())&#10;    val powerState by viewModel.powerState.observeAsState()&#10;    val batteryStats by viewModel.batteryStats.observeAsState()&#10;    val riskScore by viewModel.riskScore.observeAsState()&#10;    val insurancePremium by viewModel.insurancePremium.observeAsState()&#10;    val currentSpeed by viewModel.currentSpeed.observeAsState(0f)&#10;    val reportStatus by viewModel.reportGenerationStatus.observeAsState()&#10;&#10;    // New session management states&#10;    val sessionState by sessionViewModel.sessionState.observeAsState(SessionState.STOPPED)&#10;    val activeSession by sessionViewModel.activeSession.observeAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.initializeFleetManagement()&#10;    }&#10;&#10;    // Show status messages when reports are generated&#10;    reportStatus?.let { status -&gt;&#10;        LaunchedEffect(status) {&#10;            // You could show a snackbar or toast here&#10;            // For now, we'll just log it (the status is already shown in the UI)&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        TransparentAppBar(&#10;            title = &quot;Smart Fleet Management&quot;,&#10;            onBackPressed = onBackPressed&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp),&#10;            contentPadding = PaddingValues(top = 120.dp, bottom = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // NEW: Background Telematics Session Panel - Added at the top for prominence&#10;            item {&#10;                TelematicsSessionPanel(&#10;                    viewModel = sessionViewModel&#10;                )&#10;            }&#10;&#10;            // Fleet Control Panel - Updated to work alongside session management&#10;            item {&#10;                FleetControlPanel(&#10;                    isCollecting = isCollecting,&#10;                    onToggleCollection = {&#10;                        if (isCollecting) {&#10;                            viewModel.stopFleetMonitoring()&#10;                        } else {&#10;                            viewModel.startFleetMonitoring()&#10;                        }&#10;                    },&#10;                    batteryStats = batteryStats,&#10;                    sessionState = sessionState&#10;                )&#10;            }&#10;&#10;            // Driver Status Dashboard&#10;            item {&#10;                DriverStatusDashboard(&#10;                    driverState = driverState,&#10;                    currentTrip = currentTrip,&#10;                    riskScore = riskScore&#10;                )&#10;            }&#10;&#10;            // Real-time Events Monitor&#10;            item {&#10;                RealTimeEventsMonitor(&#10;                    events = drivingEvents.take(5), // Show last 5 events&#10;                    currentSpeed = currentSpeed,&#10;                    onViewAllEvents = { viewModel.exportEventReport() }&#10;                )&#10;            }&#10;&#10;            // Insurance Analytics&#10;            item {&#10;                InsuranceAnalyticsDashboard(&#10;                    premium = insurancePremium,&#10;                    riskScore = riskScore,&#10;                    onGenerateReport = { viewModel.generateInsuranceReport() }&#10;                )&#10;            }&#10;&#10;            // Fleet Analytics Charts&#10;            item {&#10;                FleetAnalyticsCharts(&#10;                    events = drivingEvents,&#10;                    currentTrip = currentTrip&#10;                )&#10;            }&#10;&#10;            // Report Generation Status&#10;            reportStatus?.let { status -&gt;&#10;                item {&#10;                    ReportStatusCard(status = status)&#10;                }&#10;            }&#10;&#10;            // Navigation to Reports Screen&#10;            item {&#10;                NavigationCard(&#10;                    onNavigateToReports = onNavigateToReports&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FleetControlPanel(&#10;    isCollecting: Boolean,&#10;    onToggleCollection: () -&gt; Unit,&#10;    batteryStats: TelemetriManager.BatteryOptimizationStats?,&#10;    sessionState: SessionState&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.7f)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Fleet Command Center&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (isCollecting) Icons.Default.RadioButtonChecked else Icons.Default.RadioButtonUnchecked,&#10;                            contentDescription = null,&#10;                            tint = if (isCollecting) Color.Green else Color.Gray,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = if (isCollecting) &quot;Advanced Monitoring Active&quot; else &quot;System Standby&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;&#10;                    // Session status indicator&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = when (sessionState) {&#10;                                SessionState.RUNNING -&gt; Icons.Default.PlayCircle&#10;                                SessionState.PAUSED -&gt; Icons.Default.PauseCircle&#10;                                SessionState.STOPPED -&gt; Icons.Default.StopCircle&#10;                                SessionState.ERROR -&gt; Icons.Default.Error&#10;                            },&#10;                            contentDescription = null,&#10;                            tint = when (sessionState) {&#10;                                SessionState.RUNNING -&gt; Color.Green&#10;                                SessionState.PAUSED -&gt; Color(0xFFFF9800)&#10;                                SessionState.STOPPED -&gt; Color.Gray&#10;                                SessionState.ERROR -&gt; Color.Red&#10;                            },&#10;                            modifier = Modifier.size(14.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(6.dp))&#10;                        Text(&#10;                            text = &quot;Background Session: ${sessionState.name.lowercase()}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Button(&#10;                    onClick = onToggleCollection,&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = if (isCollecting)&#10;                            MaterialTheme.colorScheme.errorContainer else&#10;                            MaterialTheme.colorScheme.secondaryContainer&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (isCollecting) Icons.Default.Stop else Icons.Default.PlayArrow,&#10;                        contentDescription = null&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(if (isCollecting) &quot;Stop Fleet&quot; else &quot;Start Fleet&quot;)&#10;                }&#10;            }&#10;&#10;            if (batteryStats != null) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    InfoChip(&#10;                        icon = Icons.Default.Battery6Bar,&#10;                        label = &quot;Battery&quot;,&#10;                        value = &quot;${batteryStats.currentBatteryLevel.toInt()}%&quot;&#10;                    )&#10;                    InfoChip(&#10;                        icon = Icons.Default.Speed,&#10;                        label = &quot;Power Mode&quot;,&#10;                        value = batteryStats.powerMode&#10;                    )&#10;                    InfoChip(&#10;                        icon = Icons.Default.Sensors,&#10;                        label = &quot;Active Sensors&quot;,&#10;                        value = &quot;${batteryStats.activeSensors}&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DriverStatusDashboard(&#10;    driverState: DriverState?,&#10;    currentTrip: TripScore?,&#10;    riskScore: Float?&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Driver Status&quot;,&#10;        icon = Icons.Default.Person,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (driverState != null) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    DataRow(&quot;Driver Status&quot;, if (driverState.isDriver) &quot;Confirmed Driver&quot; else &quot;Passenger/Unknown&quot;)&#10;                    DataRow(&quot;Confidence&quot;, &quot;${(driverState.confidence * 100).toInt()}%&quot;)&#10;                    DataRow(&quot;Phone Position&quot;, driverState.phonePosition.name.replace(&quot;_&quot;, &quot; &quot;))&#10;                    DataRow(&quot;Movement Pattern&quot;, driverState.movementPattern.name.replace(&quot;_&quot;, &quot; &quot;))&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Driver confidence indicator&#10;                    CircularProgressIndicator(&#10;                    progress = { driverState.confidence },&#10;                    modifier = Modifier.size(60.dp),&#10;                    color = when {&#10;                                                driverState.confidence &gt; 0.8f -&gt; Color.Green&#10;                                                driverState.confidence &gt; 0.6f -&gt; Color.Yellow&#10;                                                else -&gt; Color.Red&#10;                                            },&#10;                    strokeWidth = 6.dp,&#10;                    trackColor = ProgressIndicatorDefaults.circularTrackColor,&#10;                    strokeCap = ProgressIndicatorDefaults.CircularDeterminateStrokeCap,&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Driver\nConfidence&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Driver detection not available - start fleet monitoring&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        }&#10;&#10;        if (currentTrip != null) {&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = &quot;Current Trip Performance&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                ScoreCard(&quot;Overall&quot;, currentTrip.overallScore, Color.Blue)&#10;                ScoreCard(&quot;Safety&quot;, currentTrip.safetyScore, Color.Green)&#10;                ScoreCard(&quot;Legal&quot;, currentTrip.legalComplianceScore, Color.Red)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RealTimeEventsMonitor(&#10;    events: List&lt;DrivingEvent&gt;,&#10;    currentSpeed: Float,&#10;    onViewAllEvents: () -&gt; Unit&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Real-Time Event Monitor&quot;,&#10;        icon = Icons.Default.Warning,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        // Add speedometer at the top&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Current Speed&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            DigitalSpeedometer(&#10;                speed = currentSpeed,&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;&#10;        if (events.isNotEmpty()) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;Recent Events&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            events.forEach { event -&gt;&#10;                EventCard(event = event)&#10;                if (event != events.last()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            TextButton(&#10;                onClick = onViewAllEvents,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;View All Events &amp; Generate Report&quot;)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Icon(Icons.Default.Description, contentDescription = null)&#10;            }&#10;        } else {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;No driving events detected yet. Start monitoring to see real-time events.&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PowerManagementDashboard(&#10;    powerState: AdaptivePowerManager.PowerState?,&#10;    batteryStats: TelemetriManager.BatteryOptimizationStats?,&#10;    onOptimizePower: () -&gt; Unit&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Adaptive Power Management&quot;,&#10;        icon = Icons.Default.PowerSettingsNew,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (powerState != null &amp;&amp; batteryStats != null) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    DataRow(&quot;Power Mode&quot;, powerState.powerMode.name.replace(&quot;_&quot;, &quot; &quot;))&#10;                    DataRow(&quot;Battery Level&quot;, &quot;${powerState.batteryLevel.toInt()}%&quot;)&#10;                    DataRow(&quot;Estimated Life&quot;, &quot;${powerState.estimatedBatteryLife} min&quot;)&#10;                    DataRow(&quot;Charging&quot;, if (powerState.isCharging) &quot;Yes&quot; else &quot;No&quot;)&#10;                    DataRow(&quot;Thermal State&quot;, powerState.thermalState.name)&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Battery level indicator&#10;                    CircularProgressIndicator(&#10;                        progress = powerState.batteryLevel / 100f,&#10;                        modifier = Modifier.size(60.dp),&#10;                        color = when {&#10;                            powerState.batteryLevel &gt; 50f -&gt; Color.Green&#10;                            powerState.batteryLevel &gt; 20f -&gt; Color.Yellow&#10;                            else -&gt; Color.Red&#10;                        },&#10;                        strokeWidth = 6.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Battery\nLevel&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Button(&#10;                onClick = onOptimizePower,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;                )&#10;            ) {&#10;                Icon(Icons.Default.Tune, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Optimize Power Settings&quot;)&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Power management data not available&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun InsuranceAnalyticsDashboard(&#10;    premium: RiskAssessmentEngine.InsurancePremiumEstimate?,&#10;    riskScore: Float?,&#10;    onGenerateReport: () -&gt; Unit&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Insurance Analytics&quot;,&#10;        icon = Icons.Default.Shield,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (premium != null) {&#10;            Column {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        DataRow(&quot;Base Premium&quot;, &quot;$${premium.basePremium.toInt()}/year&quot;)&#10;                        DataRow(&quot;Risk Multiplier&quot;, String.format(&quot;%.2fx&quot;, premium.riskMultiplier))&#10;                        DataRow(&quot;Estimated Premium&quot;, &quot;$${premium.estimatedPremium.toInt()}/year&quot;)&#10;                        DataRow(&quot;Discount Eligible&quot;, if (premium.discountEligible) &quot;Yes&quot; else &quot;No&quot;)&#10;                        if (premium.discountEligible) {&#10;                            DataRow(&quot;Discount&quot;, &quot;${premium.discountPercentage.toInt()}%&quot;)&#10;                        }&#10;                    }&#10;&#10;                    if (riskScore != null) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                            progress = { (100 - riskScore) / 100f },&#10;                            modifier = Modifier.size(60.dp),&#10;                            color = when {&#10;                                                                riskScore &lt; 20f -&gt; Color.Green&#10;                                                                riskScore &lt; 50f -&gt; Color.Yellow&#10;                                                                else -&gt; Color.Red&#10;                                                            },&#10;                            strokeWidth = 6.dp,&#10;                            trackColor = ProgressIndicatorDefaults.circularTrackColor,&#10;                            strokeCap = ProgressIndicatorDefaults.CircularDeterminateStrokeCap,&#10;                            )&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Text(&#10;                                text = &quot;Safety\nScore&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                if (premium.recommendations.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Text(&#10;                        text = &quot;Recommendations:&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    premium.recommendations.take(2).forEach { recommendation -&gt;&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Row {&#10;                            Icon(&#10;                                Icons.Default.TipsAndUpdates,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = recommendation,&#10;                                style = MaterialTheme.typography.bodySmall&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Button(&#10;                    onClick = onGenerateReport,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Icon(Icons.Default.Assessment, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Generate Insurance Report&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Insurance analytics will appear after sufficient driving data is collected&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FleetAnalyticsCharts(&#10;    events: List&lt;DrivingEvent&gt;,&#10;    currentTrip: TripScore?&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Fleet Analytics&quot;,&#10;        icon = Icons.Default.Analytics,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (events.isNotEmpty()) {&#10;            // Event distribution chart&#10;            val eventCounts = events.groupBy { it.eventType }.mapValues { it.value.size }&#10;&#10;            Text(&#10;                text = &quot;Event Distribution&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            eventCounts.forEach { (eventType, count) -&gt;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Text(&#10;                        text = eventType.name.replace(&quot;_&quot;, &quot; &quot;),&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    AssistChip(&#10;                        onClick = { },&#10;                        label = {&#10;                            Text(text = &quot;$count&quot;)&#10;                        },&#10;                        colors = AssistChipDefaults.assistChipColors(&#10;                            containerColor = when (eventType) {&#10;                                DrivingEventType.HARD_BRAKING, DrivingEventType.SPEEDING -&gt; Color.Red.copy(&#10;                                    alpha = 0.2f&#10;                                )&#10;                                DrivingEventType.SMOOTH_DRIVING, DrivingEventType.ECO_DRIVING -&gt; Color.Green.copy(&#10;                                    alpha = 0.2f&#10;                                )&#10;                                else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;                            }&#10;                        )&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Analytics charts will appear as driving data is collected&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EventCard(event: DrivingEvent) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = when (event.severity) {&#10;                EventSeverity.CRITICAL -&gt; Color.Red.copy(alpha = 0.1f)&#10;                EventSeverity.HIGH -&gt; Color.Red.copy(alpha = 0.1f)&#10;                EventSeverity.MEDIUM -&gt; Color.Yellow.copy(alpha = 0.1f)&#10;                else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;            }&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = when (event.eventType) {&#10;                    DrivingEventType.HARD_BRAKING -&gt; Icons.Default.PauseCircle&#10;                    DrivingEventType.RAPID_ACCELERATION -&gt; Icons.Default.Speed&#10;                    DrivingEventType.HARSH_CORNERING -&gt; Icons.Default.Rotate90DegreesCcw&#10;                    DrivingEventType.SPEEDING -&gt; Icons.Default.Warning&#10;                    DrivingEventType.PHONE_USAGE -&gt; Icons.Default.PhoneAndroid&#10;                    else -&gt; Icons.Default.Info&#10;                },&#10;                contentDescription = null,&#10;                tint = when (event.severity) {&#10;                    EventSeverity.CRITICAL -&gt; Color.Red&#10;                    EventSeverity.HIGH -&gt; Color.Red&#10;                    EventSeverity.MEDIUM -&gt; Color.Yellow&#10;                    else -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = event.eventType.name.replace(&quot;_&quot;, &quot; &quot;),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = &quot;${event.severity.name} • ${String.format(Locale.getDefault(), &quot;%.1f&quot;, event.speed * 3.6f)} km/h&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = formatTime(event.timestamp),&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DigitalSpeedometer(speed: Float, modifier: Modifier = Modifier) {&#10;    val speedText = String.format(Locale.getDefault(), &quot;%03d&quot;, speed.toInt().coerceIn(0, 999))&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .height(80.dp)&#10;            .width(120.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Color.Black&#10;        ),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(8.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // 7-segment style speed display&#10;            Row(&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                speedText.forEach { digit -&gt;&#10;                    SevenSegmentDigit(&#10;                        digit = digit,&#10;                        modifier = Modifier.padding(horizontal = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            // Unit label&#10;            Text(&#10;                text = &quot;KM/H&quot;,&#10;                style = MaterialTheme.typography.labelSmall.copy(&#10;                    color = Color.Red,&#10;                    fontSize = 10.sp&#10;                ),&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SevenSegmentDigit(digit: Char, modifier: Modifier = Modifier) {&#10;    val segments = getSevenSegmentPattern(digit)&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .width(20.dp)&#10;            .height(32.dp)&#10;    ) {&#10;        // Top horizontal segment&#10;        HorizontalSegment(&#10;            isActive = segments[0],&#10;            modifier = Modifier&#10;                .align(Alignment.TopCenter)&#10;                .offset(y = 1.dp)&#10;        )&#10;&#10;        // Top-left vertical segment&#10;        VerticalSegment(&#10;            isActive = segments[1],&#10;            modifier = Modifier&#10;                .align(Alignment.TopStart)&#10;                .offset(x = 1.dp, y = 3.dp)&#10;        )&#10;&#10;        // Top-right vertical segment&#10;        VerticalSegment(&#10;            isActive = segments[2],&#10;            modifier = Modifier&#10;                .align(Alignment.TopEnd)&#10;                .offset(x = (-1).dp, y = 3.dp)&#10;        )&#10;&#10;        // Middle horizontal segment&#10;        HorizontalSegment(&#10;            isActive = segments[3],&#10;            modifier = Modifier&#10;                .align(Alignment.Center)&#10;        )&#10;&#10;        // Bottom-left vertical segment&#10;        VerticalSegment(&#10;            isActive = segments[4],&#10;            modifier = Modifier&#10;                .align(Alignment.BottomStart)&#10;                .offset(x = 1.dp, y = (-3).dp)&#10;        )&#10;&#10;        // Bottom-right vertical segment&#10;        VerticalSegment(&#10;            isActive = segments[5],&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .offset(x = (-1).dp, y = (-3).dp)&#10;        )&#10;&#10;        // Bottom horizontal segment&#10;        HorizontalSegment(&#10;            isActive = segments[6],&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .offset(y = (-1).dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun HorizontalSegment(isActive: Boolean, modifier: Modifier = Modifier) {&#10;    Box(&#10;        modifier = modifier&#10;            .width(14.dp)&#10;            .height(2.dp)&#10;            .background(&#10;                color = if (isActive) Color.Red else Color.Red.copy(alpha = 0.1f),&#10;                shape = RoundedCornerShape(1.dp)&#10;            )&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun VerticalSegment(isActive: Boolean, modifier: Modifier = Modifier) {&#10;    Box(&#10;        modifier = modifier&#10;            .width(2.dp)&#10;            .height(12.dp)&#10;            .background(&#10;                color = if (isActive) Color.Red else Color.Red.copy(alpha = 0.1f),&#10;                shape = RoundedCornerShape(1.dp)&#10;            )&#10;    )&#10;}&#10;&#10;private fun getSevenSegmentPattern(digit: Char): BooleanArray {&#10;    return when (digit) {&#10;        '0' -&gt; booleanArrayOf(true, true, true, false, true, true, true)&#10;        '1' -&gt; booleanArrayOf(false, false, true, false, false, true, false)&#10;        '2' -&gt; booleanArrayOf(true, false, true, true, true, false, true)&#10;        '3' -&gt; booleanArrayOf(true, false, true, true, false, true, true)&#10;        '4' -&gt; booleanArrayOf(false, true, true, true, false, true, false)&#10;        '5' -&gt; booleanArrayOf(true, true, false, true, false, true, true)&#10;        '6' -&gt; booleanArrayOf(true, true, false, true, true, true, true)&#10;        '7' -&gt; booleanArrayOf(true, false, true, false, false, true, false)&#10;        '8' -&gt; booleanArrayOf(true, true, true, true, true, true, true)&#10;        '9' -&gt; booleanArrayOf(true, true, true, true, false, true, true)&#10;        else -&gt; booleanArrayOf(false, false, false, false, false, false, false) // blank&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ScoreCard(label: String, score: Float, color: Color) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;${score.toInt()}&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = color&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelMedium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun InfoChip(&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    label: String,&#10;    value: String&#10;) {&#10;    Card(&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(8.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(16.dp),&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;            Spacer(modifier = Modifier.width(4.dp))&#10;            Column {&#10;                Text(&#10;                    text = value,&#10;                    style = MaterialTheme.typography.labelMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = label,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTime(timestamp: Long): String {&#10;    val calendar = Calendar.getInstance()&#10;    calendar.timeInMillis = timestamp&#10;    return String.format(&#10;        Locale.getDefault(),&#10;        &quot;%02d:%02d:%02d&quot;,&#10;        calendar.get(Calendar.HOUR_OF_DAY),&#10;        calendar.get(Calendar.MINUTE),&#10;        calendar.get(Calendar.SECOND)&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.commerin.telemetri.ui.screens.usecases&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.livedata.observeAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.commerin.telemetri.core.*&#10;import com.commerin.telemetri.domain.model.*&#10;import com.commerin.telemetri.ui.components.*&#10;import com.commerin.telemetri.ui.viewmodels.SmartFleetViewModel&#10;import com.commerin.telemetri.ui.viewmodels.TelematicsSessionViewModel&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SmartFleetManagementScreen(&#10;    onBackPressed: () -&gt; Unit,&#10;    onNavigateToReports: () -&gt; Unit = {}, // Add navigation callback&#10;    viewModel: SmartFleetViewModel = hiltViewModel(),&#10;    sessionViewModel: TelematicsSessionViewModel = viewModel()&#10;) {&#10;    val isCollecting by viewModel.isCollecting.observeAsState(false)&#10;    val driverState by viewModel.driverState.observeAsState()&#10;    val currentTrip by viewModel.currentTrip.observeAsState()&#10;    val drivingEvents by viewModel.drivingEvents.observeAsState(emptyList())&#10;    val powerState by viewModel.powerState.observeAsState()&#10;    val batteryStats by viewModel.batteryStats.observeAsState()&#10;    val riskScore by viewModel.riskScore.observeAsState()&#10;    val insurancePremium by viewModel.insurancePremium.observeAsState()&#10;    val currentSpeed by viewModel.currentSpeed.observeAsState(0f)&#10;    val reportStatus by viewModel.reportGenerationStatus.observeAsState()&#10;&#10;    // New session management states&#10;    val sessionState by sessionViewModel.sessionState.observeAsState(SessionState.STOPPED)&#10;    val activeSession by sessionViewModel.activeSession.observeAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        viewModel.initializeFleetManagement()&#10;    }&#10;&#10;    // Show status messages when reports are generated&#10;    reportStatus?.let { status -&gt;&#10;        LaunchedEffect(status) {&#10;            // You could show a snackbar or toast here&#10;            // For now, we'll just log it (the status is already shown in the UI)&#10;        }&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        TransparentAppBar(&#10;            title = &quot;Smart Fleet Management&quot;,&#10;            onBackPressed = onBackPressed&#10;        )&#10;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp),&#10;            contentPadding = PaddingValues(top = 120.dp, bottom = 16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // NEW: Background Telematics Session Panel - Added at the top for prominence&#10;            item {&#10;                TelematicsSessionPanel(&#10;                    viewModel = sessionViewModel&#10;                )&#10;            }&#10;&#10;            // Fleet Control Panel - Updated to work alongside session management&#10;            item {&#10;                FleetControlPanel(&#10;                    isCollecting = isCollecting,&#10;                    onToggleCollection = {&#10;                        if (isCollecting) {&#10;                            viewModel.stopFleetMonitoring()&#10;                        } else {&#10;                            viewModel.startFleetMonitoring()&#10;                        }&#10;                    },&#10;                    batteryStats = batteryStats,&#10;                    sessionState = sessionState&#10;                )&#10;            }&#10;&#10;            // Driver Status Dashboard&#10;            item {&#10;                DriverStatusDashboard(&#10;                    driverState = driverState,&#10;                    currentTrip = currentTrip,&#10;                    riskScore = riskScore&#10;                )&#10;            }&#10;&#10;            // Real-time Events Monitor&#10;            item {&#10;                RealTimeEventsMonitor(&#10;                    events = drivingEvents.take(5), // Show last 5 events&#10;                    currentSpeed = currentSpeed,&#10;                    onViewAllEvents = { viewModel.exportEventReport() }&#10;                )&#10;            }&#10;&#10;            // Insurance Analytics&#10;            item {&#10;                InsuranceAnalyticsDashboard(&#10;                    premium = insurancePremium,&#10;                    riskScore = riskScore,&#10;                    onGenerateReport = { viewModel.generateInsuranceReport() }&#10;                )&#10;            }&#10;&#10;            // Fleet Analytics Charts&#10;            item {&#10;                FleetAnalyticsCharts(&#10;                    events = drivingEvents,&#10;                    currentTrip = currentTrip&#10;                )&#10;            }&#10;&#10;            // Report Generation Status&#10;            reportStatus?.let { status -&gt;&#10;                item {&#10;                    ReportStatusCard(status = status)&#10;                }&#10;            }&#10;&#10;            // Navigation to Reports Screen&#10;            item {&#10;                NavigationCard(&#10;                    onNavigateToReports = onNavigateToReports&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FleetControlPanel(&#10;    isCollecting: Boolean,&#10;    onToggleCollection: () -&gt; Unit,&#10;    batteryStats: TelemetriManager.BatteryOptimizationStats?,&#10;    sessionState: SessionState&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.7f)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Fleet Command Center&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (isCollecting) Icons.Default.RadioButtonChecked else Icons.Default.RadioButtonUnchecked,&#10;                            contentDescription = null,&#10;                            tint = if (isCollecting) Color.Green else Color.Gray,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = if (isCollecting) &quot;Advanced Monitoring Active&quot; else &quot;System Standby&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;&#10;                    // Session status indicator&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = when (sessionState) {&#10;                                SessionState.RUNNING -&gt; Icons.Default.PlayCircle&#10;                                SessionState.PAUSED -&gt; Icons.Default.PauseCircle&#10;                                SessionState.STOPPED -&gt; Icons.Default.StopCircle&#10;                                SessionState.ERROR -&gt; Icons.Default.Error&#10;                            },&#10;                            contentDescription = null,&#10;                            tint = when (sessionState) {&#10;                                SessionState.RUNNING -&gt; Color.Green&#10;                                SessionState.PAUSED -&gt; Color(0xFFFF9800)&#10;                                SessionState.STOPPED -&gt; Color.Gray&#10;                                SessionState.ERROR -&gt; Color.Red&#10;                            },&#10;                            modifier = Modifier.size(14.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(6.dp))&#10;                        Text(&#10;                            text = &quot;Background Session: ${sessionState.name.lowercase()}&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Button(&#10;                    onClick = onToggleCollection,&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = if (isCollecting)&#10;                            MaterialTheme.colorScheme.errorContainer else&#10;                            MaterialTheme.colorScheme.secondaryContainer&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (isCollecting) Icons.Default.Stop else Icons.Default.PlayArrow,&#10;                        contentDescription = null&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(if (isCollecting) &quot;Stop Fleet&quot; else &quot;Start Fleet&quot;)&#10;                }&#10;            }&#10;&#10;            if (batteryStats != null) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    InfoChip(&#10;                        icon = Icons.Default.Battery6Bar,&#10;                        label = &quot;Battery&quot;,&#10;                        value = &quot;${batteryStats.currentBatteryLevel.toInt()}%&quot;&#10;                    )&#10;                    InfoChip(&#10;                        icon = Icons.Default.Speed,&#10;                        label = &quot;Power Mode&quot;,&#10;                        value = batteryStats.powerMode&#10;                    )&#10;                    InfoChip(&#10;                        icon = Icons.Default.Sensors,&#10;                        label = &quot;Active Sensors&quot;,&#10;                        value = &quot;${batteryStats.activeSensors}&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DriverStatusDashboard(&#10;    driverState: DriverState?,&#10;    currentTrip: TripScore?,&#10;    riskScore: Float?&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Driver Status&quot;,&#10;        icon = Icons.Default.Person,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (driverState != null) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    DataRow(&quot;Driver Status&quot;, if (driverState.isDriver) &quot;Confirmed Driver&quot; else &quot;Passenger/Unknown&quot;)&#10;                    DataRow(&quot;Confidence&quot;, &quot;${(driverState.confidence * 100).toInt()}%&quot;)&#10;                    DataRow(&quot;Phone Position&quot;, driverState.phonePosition.name.replace(&quot;_&quot;, &quot; &quot;))&#10;                    DataRow(&quot;Movement Pattern&quot;, driverState.movementPattern.name.replace(&quot;_&quot;, &quot; &quot;))&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Driver confidence indicator&#10;                    CircularProgressIndicator(&#10;                    progress = { driverState.confidence },&#10;                    modifier = Modifier.size(60.dp),&#10;                    color = when {&#10;                                                driverState.confidence &gt; 0.8f -&gt; Color.Green&#10;                                                driverState.confidence &gt; 0.6f -&gt; Color.Yellow&#10;                                                else -&gt; Color.Red&#10;                                            },&#10;                    strokeWidth = 6.dp,&#10;                    trackColor = ProgressIndicatorDefaults.circularTrackColor,&#10;                    strokeCap = ProgressIndicatorDefaults.CircularDeterminateStrokeCap,&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Driver\nConfidence&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Driver detection not available - start fleet monitoring&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        }&#10;&#10;        if (currentTrip != null) {&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Text(&#10;                text = &quot;Current Trip Performance&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                ScoreCard(&quot;Overall&quot;, currentTrip.overallScore, Color.Blue)&#10;                ScoreCard(&quot;Safety&quot;, currentTrip.safetyScore, Color.Green)&#10;                ScoreCard(&quot;Legal&quot;, currentTrip.legalComplianceScore, Color.Red)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun RealTimeEventsMonitor(&#10;    events: List&lt;DrivingEvent&gt;,&#10;    currentSpeed: Float,&#10;    onViewAllEvents: () -&gt; Unit&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Real-Time Event Monitor&quot;,&#10;        icon = Icons.Default.Warning,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        // Add speedometer at the top&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Current Speed&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            DigitalSpeedometer(&#10;                speed = currentSpeed,&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;&#10;        if (events.isNotEmpty()) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            HorizontalDivider()&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;Recent Events&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            events.forEach { event -&gt;&#10;                EventCard(event = event)&#10;                if (event != events.last()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            TextButton(&#10;                onClick = onViewAllEvents,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;View All Events &amp; Generate Report&quot;)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Icon(Icons.Default.Description, contentDescription = null)&#10;            }&#10;        } else {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;No driving events detected yet. Start monitoring to see real-time events.&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun PowerManagementDashboard(&#10;    powerState: AdaptivePowerManager.PowerState?,&#10;    batteryStats: TelemetriManager.BatteryOptimizationStats?,&#10;    onOptimizePower: () -&gt; Unit&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Adaptive Power Management&quot;,&#10;        icon = Icons.Default.PowerSettingsNew,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (powerState != null &amp;&amp; batteryStats != null) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    DataRow(&quot;Power Mode&quot;, powerState.powerMode.name.replace(&quot;_&quot;, &quot; &quot;))&#10;                    DataRow(&quot;Battery Level&quot;, &quot;${powerState.batteryLevel.toInt()}%&quot;)&#10;                    DataRow(&quot;Estimated Life&quot;, &quot;${powerState.estimatedBatteryLife} min&quot;)&#10;                    DataRow(&quot;Charging&quot;, if (powerState.isCharging) &quot;Yes&quot; else &quot;No&quot;)&#10;                    DataRow(&quot;Thermal State&quot;, powerState.thermalState.name)&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Battery level indicator&#10;                    CircularProgressIndicator(&#10;                        progress = powerState.batteryLevel / 100f,&#10;                        modifier = Modifier.size(60.dp),&#10;                        color = when {&#10;                            powerState.batteryLevel &gt; 50f -&gt; Color.Green&#10;                            powerState.batteryLevel &gt; 20f -&gt; Color.Yellow&#10;                            else -&gt; Color.Red&#10;                        },&#10;                        strokeWidth = 6.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;Battery\nLevel&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            Button(&#10;                onClick = onOptimizePower,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiaryContainer&#10;                )&#10;            ) {&#10;                Icon(Icons.Default.Tune, contentDescription = null)&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&quot;Optimize Power Settings&quot;)&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Power management data not available&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun InsuranceAnalyticsDashboard(&#10;    premium: RiskAssessmentEngine.InsurancePremiumEstimate?,&#10;    riskScore: Float?,&#10;    onGenerateReport: () -&gt; Unit&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Insurance Analytics&quot;,&#10;        icon = Icons.Default.Shield,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (premium != null) {&#10;            Column {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        DataRow(&quot;Base Premium&quot;, &quot;$${premium.basePremium.toInt()}/year&quot;)&#10;                        DataRow(&quot;Risk Multiplier&quot;, String.format(&quot;%.2fx&quot;, premium.riskMultiplier))&#10;                        DataRow(&quot;Estimated Premium&quot;, &quot;$${premium.estimatedPremium.toInt()}/year&quot;)&#10;                        DataRow(&quot;Discount Eligible&quot;, if (premium.discountEligible) &quot;Yes&quot; else &quot;No&quot;)&#10;                        if (premium.discountEligible) {&#10;                            DataRow(&quot;Discount&quot;, &quot;${premium.discountPercentage.toInt()}%&quot;)&#10;                        }&#10;                    }&#10;&#10;                    if (riskScore != null) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                            progress = { (100 - riskScore) / 100f },&#10;                            modifier = Modifier.size(60.dp),&#10;                            color = when {&#10;                                                                riskScore &lt; 20f -&gt; Color.Green&#10;                                                                riskScore &lt; 50f -&gt; Color.Yellow&#10;                                                                else -&gt; Color.Red&#10;                                                            },&#10;                            strokeWidth = 6.dp,&#10;                            trackColor = ProgressIndicatorDefaults.circularTrackColor,&#10;                            strokeCap = ProgressIndicatorDefaults.CircularDeterminateStrokeCap,&#10;                            )&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Text(&#10;                                text = &quot;Safety\nScore&quot;,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                if (premium.recommendations.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Text(&#10;                        text = &quot;Recommendations:&quot;,&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    premium.recommendations.take(2).forEach { recommendation -&gt;&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Row {&#10;                            Icon(&#10;                                Icons.Default.TipsAndUpdates,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(16.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = recommendation,&#10;                                style = MaterialTheme.typography.bodySmall&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Button(&#10;                    onClick = onGenerateReport,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Icon(Icons.Default.Assessment, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Generate Insurance Report&quot;)&#10;                }&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Insurance analytics will appear after sufficient driving data is collected&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FleetAnalyticsCharts(&#10;    events: List&lt;DrivingEvent&gt;,&#10;    currentTrip: TripScore?&#10;) {&#10;    TelemetryDataCard(&#10;        title = &quot;Fleet Analytics&quot;,&#10;        icon = Icons.Default.Analytics,&#10;        color = MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;    ) {&#10;        if (events.isNotEmpty()) {&#10;            // Event distribution chart&#10;            val eventCounts = events.groupBy { it.eventType }.mapValues { it.value.size }&#10;&#10;            Text(&#10;                text = &quot;Event Distribution&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            eventCounts.forEach { (eventType, count) -&gt;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Text(&#10;                        text = eventType.name.replace(&quot;_&quot;, &quot; &quot;),&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                    AssistChip(&#10;                        onClick = { },&#10;                        label = {&#10;                            Text(text = &quot;$count&quot;)&#10;                        },&#10;                        colors = AssistChipDefaults.assistChipColors(&#10;                            containerColor = when (eventType) {&#10;                                DrivingEventType.HARD_BRAKING, DrivingEventType.SPEEDING -&gt; Color.Red.copy(&#10;                                    alpha = 0.2f&#10;                                )&#10;                                DrivingEventType.SMOOTH_DRIVING, DrivingEventType.ECO_DRIVING -&gt; Color.Green.copy(&#10;                                    alpha = 0.2f&#10;                                )&#10;                                else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;                            }&#10;                        )&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Analytics charts will appear as driving data is collected&quot;,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EventCard(event: DrivingEvent) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = when (event.severity) {&#10;                EventSeverity.CRITICAL -&gt; Color.Red.copy(alpha = 0.1f)&#10;                EventSeverity.HIGH -&gt; Color.Red.copy(alpha = 0.1f)&#10;                EventSeverity.MEDIUM -&gt; Color.Yellow.copy(alpha = 0.1f)&#10;                else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;            }&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Icon(&#10;                imageVector = when (event.eventType) {&#10;                    DrivingEventType.HARD_BRAKING -&gt; Icons.Default.PauseCircle&#10;                    DrivingEventType.RAPID_ACCELERATION -&gt; Icons.Default.Speed&#10;                    DrivingEventType.HARSH_CORNERING -&gt; Icons.Default.Rotate90DegreesCcw&#10;                    DrivingEventType.SPEEDING -&gt; Icons.Default.Warning&#10;                    DrivingEventType.PHONE_USAGE -&gt; Icons.Default.PhoneAndroid&#10;                    else -&gt; Icons.Default.Info&#10;                },&#10;                contentDescription = null,&#10;                tint = when (event.severity) {&#10;                    EventSeverity.CRITICAL -&gt; Color.Red&#10;                    EventSeverity.HIGH -&gt; Color.Red&#10;                    EventSeverity.MEDIUM -&gt; Color.Yellow&#10;                    else -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = event.eventType.name.replace(&quot;_&quot;, &quot; &quot;),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = &quot;${event.severity.name} • ${String.format(Locale.getDefault(), &quot;%.1f&quot;, event.speed * 3.6f)} km/h&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = formatTime(event.timestamp),&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>